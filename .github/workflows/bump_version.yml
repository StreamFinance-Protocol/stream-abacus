name: Check Version
on:
  pull_request_target:
    types: [opened, synchronize, reopened]

jobs:
  check_version:
    runs-on: macos-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_PAT }}
          ref: ${{ github.head_ref }}

      - name: Check if version needs to be bumped
        id: check-version
        run: |
          set +e
          vercomp () {
              if [[ $1 == $2 ]]
              then
                  return 0
              fi
              local IFS=.
              local i ver1=($1) ver2=($2)
              # fill empty fields in ver1 with zeros
              for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
              do
                  ver1[i]=0
              done
              for ((i=0; i<${#ver1[@]}; i++))
              do
                  if [[ -z ${ver2[i]} ]]
                  then
                      # fill empty fields in ver2 with zeros
                      ver2[i]=0
                  fi
                  if ((10#${ver1[i]} > 10#${ver2[i]}))
                  then
                      return 1
                  fi
                  if ((10#${ver1[i]} < 10#${ver2[i]}))
                  then
                      return 2
                  fi
              done
              return 0
          }

          # Defining a temporary directory for cloning
          TMP_DIR=$(mktemp -d)

          curl https://raw.githubusercontent.com/StreamFinance-Protocol/stream-abacus/main/build.gradle.kts > $TMP_DIR/build.gradle.kts

          # search for the first line that starts with "version" in build.gradle.kts
          # get the value in the quotes
          VERSION=$(grep "^version = " build.gradle.kts | sed -n 's/version = "\(.*\)"/\1/p')

          REPO_VERSION=$(grep "^version = " $TMP_DIR/build.gradle.kts | sed -n 's/version = "\(.*\)"/\1/p')

          # call the version comparison function
          vercomp $REPO_VERSION $VERSION
          case $? in
              0) SHOULD_BUMP=true ;;
              1) SHOULD_BUMP=true ;;
              2) SHOULD_BUMP=false ;;
          esac

          if [ $SHOULD_BUMP == true ]; then
              echo "Version needs to be bumped. Current version: $VERSION, Main branch version: $REPO_VERSION"
              exit 1
          else
              echo "Version is up to date. No need to bump."
          fi
